Please implement the following format:

Models: Handle data-level validation and simple, intrinsic business logic tied directly to the data they represent.

Services: Handle application-level business logic and complex workflows that span multiple models or external systems.

You’ve already moved database queries out of models, which is great. Here’s where validation and business logic should stay or move:

User Model:
Validation: Ensure username and email are unique and formatted correctly.

Business Logic: Hash passwords before saving (if not handled elsewhere).

Stock Model:
Validation: Check symbol length and format.

Business Logic: None beyond basic setters (e.g., converting symbol to uppercase).

Stock Daily Price / Stock Intraday Price Models:
Validation: Ensure stock_id exists (via foreign key constraint) and prices are positive.

Business Logic: None—price calculations or aggregations belong in services.

Trading Service Model:
Validation: Ensure stock_symbol is valid, state is in ServiceState enum.

Business Logic: Simple getters (e.g., is_active status), but trading decisions belong in the service layer.

Trading Transaction Model:
Validation: Ensure shares is positive, state is in TransactionState enum.

Business Logic: Calculate gain_loss when sale_price is set.

The Services
The five service files should handle the following:
user_service.py:
Business Logic: Manage user login/logout, admin privilege checks.

stock_service.py:
Business Logic: Coordinate stock creation with price data updates if needed.

price_service.py:
Business Logic: Aggregate price data (e.g., moving averages) for trading decisions.

trading_service.py:
Business Logic: Execute trading rules (e.g., buy/sell based on thresholds), update balances.

transaction_service.py:
Business Logic: Manage transaction lifecycle (open → close), update related TradingService fields.

Models: Keep data-level validation (e.g., field constraints) and simple, intrinsic business logic (e.g., gain_loss calculation). This is fine as The current setup suggests.

Services: Move application-level business logic (e.g., trading rules, multi-model workflows) to the service layer. If any of this is currently in models, it should be extracted.

The Current Setup
The models focusing on "data representation, validation, and business logic" is partially correct:
Validation: Perfect fit for models.

Business Logic: Only keep simple, model-specific logic here. Move complex or multi-model logic to services.

Recommendation
Review the models: If they contain logic beyond simple calculations or validation (e.g., trading decisions or event emission), move that to the service layer.

Leverage services for all persistence and complex workflows, as you’ve started doing.